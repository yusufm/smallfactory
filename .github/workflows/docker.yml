name: Build and Publish Docker image

on:
  workflow_dispatch:
    inputs:
      push_image:
        description: "Push image to GHCR (true) or build only (false)"
        required: false
        default: "true"
      tags:
        description: "Comma-separated list of additional tags to apply (optional)"
        required: false
        default: ""

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: inputs.push_image == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha
            type=ref,event=tag
            type=ref,event=branch
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
            ${{ format('type=raw,value={0}', inputs.tags) }}

      - name: Compute build version string
        id: version
        run: |
          short_sha="${GITHUB_SHA::7}"
          # ref names: refs/heads/main -> main, refs/tags/v1.2.3 -> v1.2.3
          ref_name="${GITHUB_REF##*/}"
          created_ts="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          build_version="${short_sha} (${ref_name}) ${created_ts}"
          echo "build_version=${build_version}" >> "$GITHUB_OUTPUT"

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ inputs.push_image == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_VERSION=${{ steps.version.outputs.build_version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
