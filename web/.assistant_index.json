{"chunks": [{"source": "README.md", "heading": "smallFactory", "text": "# smallFactory\n\nA lightweight, Git-native PLM (Product Lifecycle Management) system built for simplicity, transparency, and extensibility.\n\n---\n\n## \ud83d\udccf Specification & Versioning\n\n- API: v1.0 (DRAFT). We use Semantic Versioning; breaking changes require a MAJOR bump.\n- Authoritative Core API Specification lives at [smallfactory/core/v1/SPECIFICATION.md](smallfactory/core/v1/SPECIFICATION.md).\n- All changes must comply with the specification; if not, update the specification and version accordingly.\n\n## \u26a1 Quickstart\n\nGet up and running with smallfactory inventory management in a few simple steps:\n\n```sh", "mtime": 1754898402.055236}, {"source": "README.md", "heading": "1. Initialize a new PLM data repository", "text": "# 1. Initialize a new PLM data repository\n$ python3 sf.py init", "mtime": 1754898402.055236}, {"source": "README.md", "heading": "2. (Recommended) Create canonical entities for the location and item", "text": "# 2. (Recommended) Create canonical entities for the location and item\n$ python3 sf.py entities add l_a1 name=\"Shelf A1\"\n$ python3 sf.py entities add p_m3x10 name=\"M3x10 socket cap screw\"", "mtime": 1754898402.055236}, {"source": "README.md", "heading": "3. Add inventory for the item at the location (sfid, location, quantity are required)", "text": "# 3. Add inventory for the item at the location (sfid, location, quantity are required)\n$ python3 sf.py inventory add --sfid p_m3x10 --l_sfid l_a1 --quantity 10", "mtime": 1754898402.055236}, {"source": "README.md", "heading": "custom fields like 'notes' are optional", "text": "# custom fields like 'notes' are optional\n$ python3 sf.py inventory add --sfid p_prop --l_sfid l_b2 --quantity 20 --set notes=\"High-performance racing prop\"", "mtime": 1754898402.055236}, {"source": "README.md", "heading": "4. View your inventory", "text": "# 4. View your inventory\n$ python3 sf.py inventory ls", "mtime": 1754898402.055236}, {"source": "README.md", "heading": "5. View details of a specific item", "text": "# 5. View details of a specific item\n$ python3 sf.py inventory show p_m3x10", "mtime": 1754898402.055236}, {"source": "README.md", "heading": "6. Adjust inventory when using parts", "text": "# 6. Adjust inventory when using parts\n$ python3 sf.py inventory adjust l_a1 p_m3x10 -2", "mtime": 1754898402.055236}, {"source": "README.md", "heading": "7. Update entity metadata (canonical)", "text": "# 7. Update entity metadata (canonical)\n$ python3 sf.py entities set p_m3x10 name \"M3x10 SHCS (DIN 912)\"", "mtime": 1754898402.055236}, {"source": "README.md", "heading": "8. Check updated inventory status", "text": "# 8. Check updated inventory status\n$ python3 sf.py inventory ls", "mtime": 1754898402.055236}, {"source": "README.md", "heading": "Note: All changes are automatically committed to git!", "text": "# Note: All changes are automatically committed to git!\n```\n\n---\n\n## \ud83e\udde0 Philosophy\n\nEvery decision in smallfactory is guided by this rule:\n\n> _\u201cIf a 1\u20132 person team finds it confusing or burdensome, it doesn\u2019t belong.\u201d_\n\nWe believe powerful tools can be simple \u2014 and that PLM data should be understandable, accessible, and controlled by you.\n\n---\n\n## \ud83d\udcd0 What is smallfactory?\n\nsmallfactory is:\n\n### 1. A set of conventions (*the standard*)\nA simple, structured way to organize and store PLM data in Git \u2014 including parts, BOMs, revisions, and releases. All files are human-readable (e.g. YAML or JSON) and follow a consistent layout.\n\n### 2. A CLI + API (*the coretools*)\nA minimal set of tools to safely create, edit, and validate PLM data using the standard format \u2014 ensuring data integrity and avoiding manual errors.\n\n### 3. A sync-aware, Git-first workflow\nThe tooling pulls from and pushes to your Git remote automatically (if connected), so collaborators stay in sync by default.\n\n---\n\n## \ud83d\udd11 Core Principles", "mtime": 1754898402.055236}, {"source": "README.md", "heading": "\ud83d\udd11 Core Principles", "text": "he tooling pulls from and pushes to your Git remote automatically (if connected), so collaborators stay in sync by default.\n\n---\n\n## \ud83d\udd11 Core Principles\n\n- **\ud83e\uddf0 Zero infrastructure**  \n  No servers. No databases. Just a Git repo and a CLI tool.\n\n- **\ud83c\udf31 Git-native**  \n  All PLM data lives in your Git repo in readable, version-controlled files.\n\n- **\ud83e\udded Opinionated conventions**  \n  smallFactory defines strict defaults so you don\u2019t have to invent your own workflows or structure.\n\n- **\u267b\ufe0f Backward compatible**  \n  Formats and tooling evolve carefully, with minimal breaking changes.\n\n- **\u2699\ufe0f Extensible and open**  \n  Anyone can build their own tools on top of the coretools and data standard.\n\n- **\ud83d\udd04 Sync by default**  \n  All operations try to sync with remote data repo as much as necessary. Unless offline, then will sync when connection is restored.\n\n---\n\n## \ud83d\ude80 Portability & Minimal Setup\n\nsmallfactory is designed for global usability with minimal friction. Our approach:\n\n- **Plain Python (\u22653.7):** Runs anywhere Python is available\u2014no special environment or package manager required.", "mtime": 1754898402.055236}, {"source": "README.md", "heading": "", "text": "with minimal friction. Our approach:\n\n- **Plain Python (\u22653.7):** Runs anywhere Python is available\u2014no special environment or package manager required.\n- **requirements.txt:** All dependencies are listed in a single, standard file. Install everything with one command: `pip install -r requirements.txt`.\n- **YAML for data:** Human-friendly, easy to edit, and readable in any text editor. JSON is supported for machine-readability if needed.\n- **Single-file CLI:** The main tool is a single Python script (`sf.py`), runnable directly (`python3 sf.py ...`) or made executable (`./sf`). No build steps or complex install required.\n- **Zero infrastructure:** No databases, servers, or cloud dependencies\u2014just files in your Git repo.\n- **Optional dev tools:** Linting and testing tools (like `pytest`, `flake8`) are included for contributors, but not required for end users.\n\nThis means anyone, anywhere, can get started in seconds\u2014clone, install, run. No virtualenvs or extra setup unless you want them.\n\n---", "mtime": 1754898402.055236}, {"source": "README.md", "heading": "\ud83e\uddf1 How It Works", "text": "for end users.\n\nThis means anyone, anywhere, can get started in seconds\u2014clone, install, run. No virtualenvs or extra setup unless you want them.\n\n---\n\n## \ud83e\uddf1 How It Works\n\n### 1. The `smallfactory` Core Repository (this one)\n- Provides the data spec and conventions\n- Contains the CLI (`sf`) and programmatic API\n- Offers documentation and reference implementations\n\n### 2. Your PLM Data Repository\n- A normal Git repo (public or private)\n- Initialized with `python3 sf.py init`\n- Stores PLM data in a **clearly organized directory structure**, where each major concept (e.g. parts, boms, releases, inventory) lives in its own folder (e.g. `parts`, `boms`, `releases`, `inventory`).\n\n- As new capabilities (like inventory management, procurement, etc.) are added, they are always introduced as new **top-level directories** in the datarepo.\n\n> \ud83d\udccc You control your PLM data \u2014 smallfactory just helps you manage it safely and consistently.\n\n---\n\n## \ud83d\udd0d What You Can Do\n\n- **Inventory Management**: Add, view, update, and delete inventory items with ID tracking", "mtime": 1754898402.055236}, {"source": "README.md", "heading": "\ud83d\udd0d What You Can Do", "text": "age it safely and consistently.\n\n---\n\n## \ud83d\udd0d What You Can Do\n\n- **Inventory Management**: Add, view, update, and delete inventory items with ID tracking\n- **Stock Control**: Adjust inventory quantities for usage and restocking\n- **Data Organization**: Store inventory data in human-readable YAML files\n- **Version Control**: Track all inventory changes using Git\n- **Flexible Fields**: Add custom fields beyond the required id, name, quantity, and location\n- **Multiple Output Formats**: View data in human-readable tables, JSON, or YAML formats\n- **Git Integration**: Automatic commits with detailed metadata for inventory changes\n\n---\n\n\n\n## \ud83d\udce6 Inventory Management\n\nsmallFactory lets you track and manage inventory.\n\n### Add Inventory for an Item at a Location\n\n```sh\n$ python3 sf.py inventory add --sfid p_m3x10 --l_sfid l_a1 --quantity 100\n```\nAdds or stages inventory for an existing entity at a specific location. The file is stored under `inventory/<l_*>/<SFID>.yml` and holds operational quantity state (non-canonical).", "mtime": 1754898402.055236}, {"source": "README.md", "heading": "Adjust Quantity", "text": "an existing entity at a specific location. The file is stored under `inventory/<l_*>/<SFID>.yml` and holds operational quantity state (non-canonical).\n\n> **Required fields:** `sfid`, `location` (must start with `l_`), and `quantity` (integer \u2265 0).\n> **Canonical metadata:** Item names/attributes live under `entities/<sfid>/entity.yml` and can be set via `sf entities add/set`.\n\n\n### Adjust Quantity\n\n```sh\n$ python3 sf.py inventory adjust l_a1 p_m3x10 -5\n```\nIncrement or decrement the on-hand quantity at a specific location.\n\n### View an Inventory Item\n\n```sh\n$ python3 sf.py inventory show p_m3x10\n```\nDisplay all fields for a given `sfid`. Use `-F json` or `-F yaml` for machine-readable formats.\n\n### List All Inventory Items\n\n```sh\n$ python3 sf.py inventory ls\n```\nShow a table of all inventory items. Use `-F json` or `-F yaml` for machine-readable formats.\n\n### Delete an Inventory Item\n\n```sh\n$ python3 sf.py inventory rm p_m3x10\n```\nRemove all inventory entries for an `sfid` across all locations. Prompts for confirmation in human mode.", "mtime": 1754898402.055236}, {"source": "README.md", "heading": "", "text": "``sh\n$ python3 sf.py inventory rm p_m3x10\n```\nRemove all inventory entries for an `sfid` across all locations. Prompts for confirmation in human mode.\n\n---\n\nSee `python3 sf.py --help` for full CLI options and argument details.", "mtime": 1754898402.055236}, {"source": "web/README.md", "heading": "smallFactory Web UI", "text": "# smallFactory Web UI\n\nA modern, clean web interface for the smallFactory Git-native PLM system.\n\n## Features\n\n- **Dashboard**: Overview of inventory with quick stats and recent items\n- **Inventory Management**: \n  - List all items with search and filtering\n  - View detailed item information\n  - Add new inventory items with custom fields\n  - Edit item metadata\n  - Adjust quantities by location\n  - Delete items with confirmation\n- **Modern UI**: Clean, responsive design using Tailwind CSS\n- **Extensible**: Built to accommodate future PLM modules beyond inventory\n\n## Quick Start\n\n1. **Install dependencies**:\n   ```bash\n   cd web\n   pip install -r requirements.txt\n   ```\n\n2. **Ensure smallFactory is configured**:\n   ```bash", "mtime": 1754846868.7509859}, {"source": "web/README.md", "heading": "Make sure you have a data repository set up", "text": "# Make sure you have a data repository set up\n   cd ..\n   python sf.py init\n   ```\n\n3. **Start the web server**:\n   ```bash", "mtime": 1754846868.7509859}, {"source": "web/README.md", "heading": "from project root", "text": "# from project root\n   python sf.py web --port 8080", "mtime": 1754846868.7509859}, {"source": "web/README.md", "heading": "development mode with auto-reload", "text": "# development mode with auto-reload\n   FLASK_ENV=development python sf.py web --port 8080 --debug\n   ```\n\n4. **Access the interface**:\n   Open your browser to `http://localhost:8080`\n\n## Development\n\nTo run in development mode with auto-reload:\n\n```bash\nFLASK_ENV=development python sf.py web --port 8080 --debug\n```\n\n## Architecture\n\nThe web UI is built as a Flask application that uses the smallFactory core v1 API:\n\n- `app.py`: Main Flask application with routes\n- `templates/`: Jinja2 HTML templates\n  - `base.html`: Base template with navigation and common elements\n  - `index.html`: Dashboard page\n  - `inventory/`: Inventory-specific templates\n- `sf.py web`: CLI entrypoint for the development server\n\n## API Integration\n\nThe web UI directly imports and uses the smallFactory core API:\n\n```python\nfrom smallfactory.core.v1.inventory import (\n    list_items, view_item, add_item, \n    update_item, delete_item, adjust_quantity\n)\n```\n\nThis ensures consistency with the CLI interface and leverages all the Git-native features.", "mtime": 1754846868.7509859}, {"source": "web/README.md", "heading": "Future Extensions", "text": "item, \n    update_item, delete_item, adjust_quantity\n)\n```\n\nThis ensures consistency with the CLI interface and leverages all the Git-native features.\n\n## Future Extensions\n\nThe UI is designed to be extensible for additional PLM modules:\n\n- Parts/BOM management\n- Project tracking\n- Document management\n- Supplier management\n- Reporting and analytics\n\nEach new module can follow the same pattern with its own template directory and routes.\n\n## Vision (Qwen2\u2011VL via Ollama)\n\nThe web UI can call a local or remote Visual LLM (VLM) hosted by Ollama. We recommend Qwen2\u2011VL 2B Instruct for a lightweight, high\u2011quality model.\n\n### 1) Start Ollama and pull the model\n\nmacOS (Homebrew):\n\n```bash\nbrew install ollama\nollama serve &\nollama pull qwen2.5vl:3b\n```\n\nLinux: install from https://ollama.com/download, then:\n\n```bash\nollama serve &\nollama pull qwen2.5vl:3b\n```\n\nVerify the API:\n\n```bash\ncurl http://localhost:11434/api/tags\n```\n\n### 2) Configure smallFactory to talk to Ollama\n\nDefaults assume a local Ollama at `http://localhost:11434`. To override, set:", "mtime": 1754846868.7509859}, {"source": "web/README.md", "heading": "2) Configure smallFactory to talk to Ollama", "text": "ost:11434/api/tags\n```\n\n### 2) Configure smallFactory to talk to Ollama\n\nDefaults assume a local Ollama at `http://localhost:11434`. To override, set:\n\n```bash\nexport SF_OLLAMA_BASE_URL=http://<ollama-host>:11434\nexport SF_VISION_MODEL=qwen2.5vl:3b\n```\n\n### 3) Install web deps and run\n\n```bash\ncd web\npip install -r requirements.txt\ncd ..\npython sf.py web --port 8080\n```\n\n### 4) Use the Vision API\n\n- Generic ask (prompt + image):\n\n```bash\ncurl -s -X POST http://localhost:8080/api/vision/ask \\\n  -F \"prompt=Summarize the contents of this image in 1-2 sentences.\" \\\n  -F \"file=@/path/to/invoice.jpg\" | jq\n```\n\n- Extract part fields from an invoice:\n\n```bash\ncurl -s -X POST http://localhost:8080/api/vision/extract/part \\\n  -F \"file=@/path/to/invoice.jpg\" | jq\n```\n\nIf you see an error, ensure Ollama is running and the model is pulled.", "mtime": 1754846868.7509859}, {"source": "smallfactory/core/v1/PLM_SPECIFICATION.md", "heading": "smallFactory PLM: Minimal Spec (v0.1)", "text": "# smallFactory PLM: Minimal Spec (v0.1)\n\nStatus: DRAFT \u2014 breaking changes permitted until PROD.\n\n## Goals\n- Single, flat `entities/` namespace \u2014 no separate parts vs assemblies.\n- **Parts** are entities with an optional `bom` (i.e., assemblies) \u2014 one schema.\n- **No standalone BOM files** \u2014 BOM is inferred from `bom`.\n- **Revisions** are immutable snapshots inside each part; a `released` pointer selects the current one.\n- **Finished goods/SKUs** reference a top part + optional config; serials are created at build time.\n\n---\n\n## Repository layout (top-level)\n```\nentities/                 # canonical source of truth for all entities\nfinished_goods/           # SKUs and build records (no per-unit data here)\ninventory/                # per-part journals and generated on-hand caches\nworkorders/               # work orders (optional, but recommended)\nserials/                  # per-unit records (one file per unit)\n```\n\n---\n\n## Entity directories (flat, one per entity)\n```\nentities/<sfid>/\n  entity.yml              # required; schema below", "mtime": 1754973798.9089708}, {"source": "smallfactory/core/v1/PLM_SPECIFICATION.md", "heading": "Entity directories (flat, one per entity)", "text": "rds (one file per unit)\n```\n\n---\n\n## Entity directories (flat, one per entity)\n```\nentities/<sfid>/\n  entity.yml              # required; schema below\n  files/                  # optional; working files area (copied into snapshots)\n  revisions/              # optional; immutable snapshots by rev label\n    1/\n      meta.yml            # required for a snapshot\n    2/\n      ...\n  refs/\n    released              # text file containing the current rev label (e.g., \"2\")\n```\n\n### Directory intentions (what goes where)\n\n\u2022 **`files/`** \u2014 Working area for in\u2011progress files (e.g., CAD and documentation). Included in snapshots when you cut a revision. There is no prescribed substructure under `files/`; organize as needed.\n\n\u2022 **`revisions/<rev>/`** \u2014 Immutable snapshot for a specific revision label. Treat contents as read\u2011only once created (and especially once released).\n\n  \u2022 **`revisions/<rev>/meta.yml`** \u2014 Snapshot metadata (rev, status, source commit, notes, artifact list, hashes, etc.).\n\n\u2022 **`refs/`** \u2014 Small text pointers that select important revisions (e.g., `refs/released` contains the current rev label). Tooling updates these; avoid manual edits.", "mtime": 1754973798.9089708}, {"source": "smallfactory/core/v1/PLM_SPECIFICATION.md", "heading": "", "text": "Small text pointers that select important revisions (e.g., `refs/released` contains the current rev label). Tooling updates these; avoid manual edits.\n\nTop\u2011level directories (recap):\n\n\u2022 **`entities/`** \u2014 Canonical home of all entities; one directory per SFID.\n\n\u2022 **`finished_goods/`** \u2014 SKUs and build records. Recommended layout:\n\n  \u2022 `finished_goods/<sku>/sku.yml` \u2014 Defines the top part and optional config; `rev` defaults to `released` if omitted.\n\n  \u2022 `finished_goods/<sku>/builds/<date-or-id>/build.lock.yml` \u2014 Resolved, reproducible BOM lock captured at build start; referenced by work orders and serials.\n\n\u2022 **`inventory/`** \u2014 Per\u2011part journals and derived on\u2011hand caches:\n\n  \u2022 `inventory/p_*/journal.ndjson` \u2014 Append\u2011only quantity deltas by location.\n\n  \u2022 `inventory/p_*/onhand.generated.yml` \u2014 Derived on\u2011hand totals by location (tooling writes/updates).\n\n\u2022 **`workorders/`** \u2014 One directory per work order, at minimum containing `order.yml` (qty/site/status, etc.).\n\n\u2022 **`serials/`** \u2014 One file per built unit at `serials/<sku>/<year>/<ULID>.yml`, recording status and events over the unit\u2019s lifecycle.", "mtime": 1754973798.9089708}, {"source": "smallfactory/core/v1/PLM_SPECIFICATION.md", "heading": "`entity.yml` (all entities; parts may be explicit or inferred)", "text": "tatus, etc.).\n\n\u2022 **`serials/`** \u2014 One file per built unit at `serials/<sku>/<year>/<ULID>.yml`, recording status and events over the unit\u2019s lifecycle.\n\n### `entity.yml` (all entities; parts may be explicit or inferred)\n```yaml\nuom: ea                    # optional; defaults to 'ea' if omitted\npolicy: make               # optional (make|buy|phantom)\nattrs:                     # free-form attributes (string|number|bool|array|object)\n  voltage: [120, 240]", "mtime": 1754973798.9089708}, {"source": "smallfactory/core/v1/PLM_SPECIFICATION.md", "heading": "Only for parts that are assemblies (dynamic BOM)", "text": "# Only for parts that are assemblies (dynamic BOM)\nbom:\n  - use: p_adapter\n    qty: 1\n    rev: released          # selector or explicit label (e.g., \"B\")\n  - use: p_motor\n    qty: 1\n    rev: released\n    when:                  # optional config gate: all conditions must match\n      voltage: 120\n    alternates:            # optional explicit alternates (evaluated if primary unavailable)\n      - use: p_motor_alt\n        rev: released\n    alternates_group: ISO_M3x10  # optional family/group-based alternates\n```\n\nNote on kind inference and validation:\n\n- Do not include a `kind` field; tooling infers kind from the `sfid` prefix.\n- Recognized prefixes (v0.1): `p_` \u2192 part, `l_` \u2192 location, `sup_` \u2192 supplier. More may be added later.\n- If a `kind` field appears, the linter errors; kinds are prefix-inferred only.\n- For parts (explicit or inferred), `uom` is optional and defaults to 'ea'. Only parts may define `bom`, `files/`, `revisions/`, and `refs/`.\n- No legacy aliases: `children` is invalid; only `bom` is accepted.", "mtime": 1754973798.9089708}, {"source": "smallfactory/core/v1/PLM_SPECIFICATION.md", "heading": "Minimal purchased part (no revisions)", "text": "efaults to 'ea'. Only parts may define `bom`, `files/`, `revisions/`, and `refs/`.\n- No legacy aliases: `children` is invalid; only `bom` is accepted.\n\nBOM defaults (to minimize boilerplate):\n\n- On each `bom` line:\n  - `qty` should not be omitted; default is `1`.\n  - `rev` should not be omitted; default is `released`.\n  - Omitted `when` means the line is always included.\n  - `bom` is only allowed on parts.\n\n### Minimal purchased part (no revisions)\nBuy parts can be very sparse. If a part has `policy: buy` and there is no `revisions/` directory and no `refs/released`, the resolver treats it as having an implicit released snapshot.\n\n```\nentities/p_cap_10uF/\n  entity.yml\n```\n\n```yaml", "mtime": 1754973798.9089708}, {"source": "smallfactory/core/v1/PLM_SPECIFICATION.md", "heading": "entities/p_cap_10uF/entity.yml", "text": "# entities/p_cap_10uF/entity.yml\nuom: ea\npolicy: buy\nattrs:\n  mpn: ABC-123\n  voltage: 10V\n  tolerance: 10%\n```\n\nNotes:\n\n- No `revisions/`, `refs/`, or `files/` are required for such parts.\n- When used in a BOM with `rev: released` (or when `rev` is omitted), the resolver will accept the implicit released snapshot.\n\n### Revision snapshot (`revisions/<rev>/meta.yml`)\n```yaml\nrev: B\nstatus: released           # draft|released|obsolete (suggested)\neco: ECO-0012              # optional change record ID\nsource_commit: 3c2a0f4     # git SHA that produced this snapshot\ngenerated_at: 2025-08-10T19:40:00Z\nnotes: \"Slots +2mm; tolerance update.\"\nartifacts:                 # files relative to this snapshot dir\n  - role: cad-export\n    path: adapter.step\n    sha256: 1a7f...59\n  - role: drawing\n    path: adapter.pdf\n    sha256: 4c5e...aa\n```\n\n### Released pointer (`refs/released`)\nA single-line text file containing the current revision label, e.g.:\n```\n2\n```\n\n---\n\n## Finished goods (SKUs)\n```\nfinished_goods/<sku>/", "mtime": 1754973798.9089708}, {"source": "smallfactory/core/v1/PLM_SPECIFICATION.md", "heading": "Finished goods (SKUs)", "text": "efs/released`)\nA single-line text file containing the current revision label, e.g.:\n```\n2\n```\n\n---\n\n## Finished goods (SKUs)\n```\nfinished_goods/<sku>/\n  sku.yml\n  builds/\n    2025-08-10/\n      build.lock.yml      # generated: exact revs used for this build\n```\n\n### `sku.yml`\n```yaml\ntop_part: p_toaster\nrev: released              # selector; can be explicit label if you want a frozen SKU\nconfig:                    # optional config passed to resolver (used by `when` rules)\n  voltage: 120\nsku:\n  upc: 123456789012\n  color: black\n  region: US\n```\n\n---\n\n## Work orders & serials (where per-unit data lives)\n**Work order (optional but recommended):**\n```\nworkorders/workorder-000123/\n  order.yml\n  build.lock.yml           # copy of the lock used for this work order\n```\n\n```yaml", "mtime": 1754973798.9089708}, {"source": "smallfactory/core/v1/PLM_SPECIFICATION.md", "heading": "workorders/workorder-000123/order.yml", "text": "# workorders/workorder-000123/order.yml\nworkorder: workorder-000123\nsku: fg_toaster_black_120v\nqty: 3\nsite: l_sanjose\nopened_at: 2025-08-10T19:40:00Z\n```\n\n**Serials (canonical, one file per unit):**\n```\nserials/<sku>/<year>/<ULID>.yml\n```\n```yaml\nserial: 01J9Z9Q6H3J6NRS4K1YV3M8U5K\nlabel: TOAST-25-223-0001\nsku: fg_toaster_black_120v\nworkorder: workorder-000123\nlockfile: ../../../../finished_goods/fg_toaster_black_120v/builds/2025-08-10/build.lock.yml\nstatus: built\nevents:\n  - ts: 2025-08-10T20:12:33Z\n    action: test\n    result: pass\n```\n\n---\n\n## Inventory (MVP)\n\nSFID quick reference:\n\n- Authoritative regex:\n  ```regex\n  ^(?=.{3,64}$)[a-z]+_[a-z0-9_-]*[a-z0-9]$\n  ```\n- Common prefixes used here:\n  - Locations: `l_*` (e.g., `l_a1`, `l_bin7`, `l_line1`)\n  - Parts: `p_*` (e.g., `p_m3x10`, `p_cap_10uf`)\n\nRecommended naming conventions (non-normative):\n\n- Parts (`p_*`):\n  - Structure: `p_<part-number>[ _<classification> ... ]`\n  - In `<part-number>`, prefer hyphens for subcodes (e.g., `stm32-c`, `m3x10`).", "mtime": 1754973798.9089708}, {"source": "smallfactory/core/v1/PLM_SPECIFICATION.md", "heading": "", "text": "rts (`p_*`):\n  - Structure: `p_<part-number>[ _<classification> ... ]`\n  - In `<part-number>`, prefer hyphens for subcodes (e.g., `stm32-c`, `m3x10`).\n  - Classifications are separated by `_`; inside each classification use `[a-z0-9-]` (no `_`).\n  - Examples: `p_m3x10`, `p_m3x10_lot23`, `p_stm32-c_sn39402`.\n\nLayout:\n```\ninventory/\n  <sfid>/\n    journal.ndjson           # append-only; one JSON object per line\n    onhand.generated.yml     # optional per-part cache; do not hand-edit\n```\n\nJournal entry format (NDJSON; one JSON object per line):\n```\n{\"txn\":\"01J9Z6T9S2B3HQX5WAM4R2F3G6\",\"location\":\"l_inbox\",\"qty_delta\":200,\"reason\":\"receipt\"}\n{\"txn\":\"01J9Z6Y9M8K7C1P2D3F4H5J6K7\",\"location\":\"l_line1\",\"qty_delta\":-16,\"reason\":\"issue\"}\n```\n\nNotes:\n\n- Time derives from the ULID embedded in `txn`; journal entries MUST NOT include a separate `ts` field. Backdating is not supported.\n- Quantities in journals are always interpreted in the part\u2019s base `uom`; journal entries MUST NOT include a `uom` field.", "mtime": 1754973798.9089708}, {"source": "smallfactory/core/v1/PLM_SPECIFICATION.md", "heading": "", "text": "Backdating is not supported.\n- Quantities in journals are always interpreted in the part\u2019s base `uom`; journal entries MUST NOT include a `uom` field.\n- Format is NDJSON (JSON Lines) for safe, line-wise appends and union merges.\n- File identity is the path: `inventory/<sfid>/`. Do not repeat the part SFID inside entries.\n- Use SFIDs for `location`. No `sfid` or `kind` fields inside inventory entries.\n- Writes are O(1) appends; tooling updates `onhand.generated.yml` for that part.\n- Global on-hand is the sum over per-part caches.\n\n Defaults and minimal entry (tooling fills):\n\n - Minimal accepted fields at write time: `qty_delta`.\n - Tooling fills if omitted:\n   - `txn`: generated ULID (idempotency; ULID time is authoritative)\n   - `location`: from `sfdatarepo.yml: inventory.default_location` if present\n\n Minimal input vs. stored example:\n ```", "mtime": 1754973798.9089708}, {"source": "smallfactory/core/v1/PLM_SPECIFICATION.md", "heading": "user input (conceptual)", "text": "# user input (conceptual)\n {\"qty_delta\": 5}", "mtime": 1754973798.9089708}, {"source": "smallfactory/core/v1/PLM_SPECIFICATION.md", "heading": "stored after tooling fills defaults", "text": "# stored after tooling fills defaults\n {\"txn\":\"01J9ZCD...\",\"location\":\"l_inbox\",\"qty_delta\":5}\n ```\n\n Optional repo config (for defaults):\n ```yaml", "mtime": 1754973798.9089708}, {"source": "smallfactory/core/v1/PLM_SPECIFICATION.md", "heading": "sfdatarepo.yml", "text": "# sfdatarepo.yml\n inventory:\n   default_location: l_inbox\n ```\n\nGit merge hint (reduce conflicts on append-only logs):\n```\ninventory/p_*/journal.ndjson merge=union\n```\n\nCLI (full names):\n```\nsf inventory post --part <sfid> --qty-delta <n> [--location <sfid>] [--reason <text>]\nsf inventory onhand [--part <sfid>] [--location <sfid>]\nsf inventory rebuild\n```\n\nLinter rules:\n\n- Validate that `part` (derived from path) and `location` SFIDs exist in `entities/`.\n- Journal entries MUST NOT include `uom`; quantities are interpreted in the part\u2019s base `uom`.\n- For serialized parts, prefer `qty_delta` \u2208 {+1, \u22121} with a `serial` pointer.\n- Generated files (`onhand.generated.yml`) must not be hand-edited.\n Optional per-location on-hand cache (reverse index):\n \n - Layout:\n   - `inventory/_location/<location_sfid>/onhand.generated.yml`\n  - Example:\n    ```yaml", "mtime": 1754973798.9089708}, {"source": "smallfactory/core/v1/PLM_SPECIFICATION.md", "heading": "inventory/_location/l_inbox/onhand.generated.yml", "text": "# inventory/_location/l_inbox/onhand.generated.yml\n    uom: ea\n    as_of: 2025-08-10T21:15:00Z\n    parts:\n      p_cap_10uf: 184\n      p_res_1k: 500\n    total: 684\n    ```\n - Behavior:\n   - On each `sf inventory post`, tooling updates both:\n     - `inventory/<part_sfid>/onhand.generated.yml` (by_location, total)\n     - `inventory/_location/<location_sfid>/onhand.generated.yml` (parts, total)\n   - `sf inventory rebuild` regenerates per-part caches from journals, then per-location caches from per-part caches.\n{{ ... }}\n   - Do not hand-edit generated files.\n\nAppendix: .gitattributes (recommended)\n```", "mtime": 1754973798.9089708}, {"source": "smallfactory/core/v1/PLM_SPECIFICATION.md", "heading": "Append-only inventory journals: prefer union merges to reduce conflicts", "text": "# Append-only inventory journals: prefer union merges to reduce conflicts\ninventory/p_*/journal.ndjson merge=union\n```\n\nAppendix: onhand.generated.yml (example)\n```yaml", "mtime": 1754973798.9089708}, {"source": "smallfactory/core/v1/PLM_SPECIFICATION.md", "heading": "inventory/<sfid>/onhand.generated.yml", "text": "# inventory/<sfid>/onhand.generated.yml\nuom: ea\nas_of: 2025-08-10T21:15:00Z\nby_location:\n  l_inbox: 184\n  l_shelf: 0\ntotal: 184\n```\n- Structure is minimal: a single-unit-of-measure per part, map by `location` SFID, and an overall `total`.\n- This file is derived; tooling updates it on each post and during `sf inventory rebuild`.\n\n---\n\n## Resolver behavior (deterministic)\n**Input:** a path to `finished_goods/<sku>` (and repo state/commit).  \n**Output:** a fully resolved BOM with exact part SFIDs and revision labels.\n\nAlgorithm (conceptual):\n1. Load `sku.yml` \u2192 get `top_part`, SKU `rev` selector (e.g., `released`), and `config`.\n2. Depth-first walk from `entities/<top_part>/entity.yml`.\n3. For each bom line:\n   - Evaluate `when` against `config`; skip if it doesn\u2019t match.\n   - Determine target revision:\n     - If `rev` is a **label** (e.g., \"B\"), use it.\n     - If `rev` is **`released`**, read `entities/<use>/refs/released`. If this file is missing and the part has `policy: buy` with no `revisions/`, treat it as an implicit released snapshot.", "mtime": 1754973798.9089708}, {"source": "smallfactory/core/v1/PLM_SPECIFICATION.md", "heading": "Commands (minimal surface)", "text": "entities/<use>/refs/released`. If this file is missing and the part has `policy: buy` with no `revisions/`, treat it as an implicit released snapshot.\n   - If the chosen rev does not exist or `status` \u2260 `released`:\n     - Try `alternates` in order, then `alternates_group` (pick any **released** member).\n     - If none valid \u2192 error.\n4. Accumulate quantities (respecting nested assemblies) and return the resolved tree + a flattened list.\n5. Optionally write `build.lock.yml` with all `{use, rev, qty}` (and artifact hashes if desired).\n\n**Note:** There are no separate BOM files. The BOM is the `bom` list present in each part's `entity.yml`.\n\n---\n\n## Commands (minimal surface)\n```\nsf part revision cut <sfid> <revision> --include exports docs --note \"...\"\nsf part revision release <sfid> <revision>\nsf resolve finished_goods/<sku>\nsf lock finished_goods/<sku> [--output <path>]\nsf serial mint --workorder <workorder> --qty <n>\nsf inventory post --part <sfid> --qty-delta <n> [--location <sfid>] [--reason <text>]", "mtime": 1754973798.9089708}, {"source": "smallfactory/core/v1/PLM_SPECIFICATION.md", "heading": "Conventions & constraints", "text": "-output <path>]\nsf serial mint --workorder <workorder> --qty <n>\nsf inventory post --part <sfid> --qty-delta <n> [--location <sfid>] [--reason <text>]\nsf inventory onhand [--part <sfid>] [--location <sfid>]\nsf inventory rebuild\nsf lint   # validate schema + referential integrity + allowed fields by kind\n```\n\n---\n\n## Conventions & constraints\n- `entities/<sfid>/entity.yml` is **required** and must include:\n  - Do not include `sfid`. Identity is derived from the directory name, which MUST be a valid SFID and use a recognized prefix (e.g., `p_`, `l_`, `sup_`). The prefix determines the kind.\n  - For parts (explicit or inferred), `uom` is optional and defaults to 'ea'.\n  - Only parts (explicit or inferred) may define `bom`, `files/`, `revisions/`, and `refs/`.\n  - No legacy aliases: the `children` key MUST NOT appear.\n  - For `policy: buy` parts, `revisions/` and `refs/` may be omitted; such parts are treated as having an implicit released snapshot.\n- Revision directories under `revisions/` are **immutable** once released.", "mtime": 1754973798.9089708}, {"source": "smallfactory/core/v1/PLM_SPECIFICATION.md", "heading": "", "text": "be omitted; such parts are treated as having an implicit released snapshot.\n- Revision directories under `revisions/` are **immutable** once released.\n- `refs/released` is the **only pointer** you flip to advance the world.\n- Large binaries (`*.step`, `*.stl`, `*.pdf`) should be tracked with **Git LFS**.\n- SFIDs MUST be globally unique and never reused; prefixes recommended (e.g., `p_`, `l_`, `sup_`).\n\n- Auto-commit history:\n  - All mutating operations auto-commit with clear messages including the required `::sfid::` tokens.\n\n- Entity lifecycle:\n  - Each `entities/<sfid>/` directory persists forever (even if retired). Prefer marking `status: retired` over deletion.\n- Human-readable data formats:\n  - YAML is the primary storage format; JSON is supported for machine I/O.\n- Git-native and file-based:\n  - The Git repository is the source of truth; history serves as the audit trail.\n\n- Commit metadata tokens:\n  - Commits that affect an entity MUST include `::sfid::<SFID>` in the message.\n  - For inventory posts, include both tokens: `::sfid::<PART_SFID>` and `::sfid::<LOCATION_SFID>`.", "mtime": 1754973798.9089708}, {"source": "smallfactory/core/v1/PLM_SPECIFICATION.md", "heading": "", "text": "ntity MUST include `::sfid::<SFID>` in the message.\n  - For inventory posts, include both tokens: `::sfid::<PART_SFID>` and `::sfid::<LOCATION_SFID>`.\n- Output modes: CLI and API support `human`, `json`, and `yaml` outputs; field shapes are stable within a major version.\n- Determinism: Given the same repo state and inputs, operations produce the same results.\n- Branding: User-facing name is \"smallFactory\" (lowercase s, uppercase F).\n- Predictable layout: Top-level directories (e.g., `entities/`, `inventory/`, `finished_goods/`, `workorders/`) are stable; new capabilities add new top-level dirs.\n\n- Single source of truth API:\n  - All tools and interfaces (CLI, Web, scripts, integrations) MUST call the Core API for all reads and writes.\n  - Direct file mutations are not supported; the API performs validation, defaulting, linting, and writes with required commit metadata.\n\nTerminology note: `sfid` refers to the smallFactory identifier for an entity (e.g., `p_...`, `l_...`, `sup_...`). External identifiers keep their native names, e.g., manufacturer part numbers (`mpn`), change record `eco` ID, or supplier-provided IDs.", "mtime": 1754973798.9089708}, {"source": "smallfactory/core/v1/PLM_SPECIFICATION.md", "heading": "Ergonomics & Defaults", "text": ", `sup_...`). External identifiers keep their native names, e.g., manufacturer part numbers (`mpn`), change record `eco` ID, or supplier-provided IDs.\n\n---\n\n## Ergonomics & Defaults\n\n- Minimal required fields:\n  - All entities: omit the `sfid` field; identity is the directory name and must be a valid SFID with a recognized prefix. Do not include a `kind` field.\n  - Parts (explicit or inferred): `uom` is optional; default 'ea'.\n- Kind inference:\n  - Prefixes (v0.1): `p_` \u2192 part, `l_` \u2192 location, `sup_` \u2192 supplier.\n- BOM defaults (applied by resolver and validated by linter):\n  - `qty` defaults to `1` if omitted.\n  - `rev` defaults to `released` if omitted.\n  - Omitted `when` means the line is always included.\n  - `bom` is only allowed on parts.\n- Resolver defaults and constraints:\n  - Traverse `bom` only for parts (explicit or inferred).\n  - Treat missing `qty` as `1` and missing `rev` as `released`.\n  - If the chosen revision is not released, try `alternates` then `alternates_group`; error if none are valid.", "mtime": 1754973798.9089708}, {"source": "smallfactory/core/v1/PLM_SPECIFICATION.md", "heading": "Tiny end-to-end example (happy path)", "text": "as `1` and missing `rev` as `released`.\n  - If the chosen revision is not released, try `alternates` then `alternates_group`; error if none are valid.\n  - `policy: buy` parts with no `revisions/` and no `refs/released` are allowed; treat as implicit released. In `build.lock.yml`, record `rev: implicit` for such parts.\n- Finished goods defaults:\n  - In `finished_goods/<sku>/sku.yml`, `rev` defaults to `released` if omitted.\n- Linter behavior (friendly but strict):\n  - Explain inferred kinds and defaulted fields; error on kind/prefix mismatch, invalid keys, `bom` on non-part, and any legacy keys. Do not error on missing `uom`; default to 'ea' at read time.\n\n---\n\n## Tiny end-to-end example (happy path)\n1) Edit CAD for **p_adapter**, export into `files/`, commit.\n2) `sf part revision cut p_adapter B && sf part revision release p_adapter B`\n   - Only `entities/p_adapter/refs/released` changes to `\"B\"`.\n3) `sf resolve finished_goods/fg_toaster_black_120v`\n   - Uses `rev: released` pointers; no product files edited.", "mtime": 1754973798.9089708}, {"source": "smallfactory/core/v1/PLM_SPECIFICATION.md", "heading": "Scope of Applicability", "text": "ter/refs/released` changes to `\"B\"`.\n3) `sf resolve finished_goods/fg_toaster_black_120v`\n   - Uses `rev: released` pointers; no product files edited.\n4) `sf lock finished_goods/fg_toaster_black_120v`\n   - Produces a reproducible build recipe; work orders and serials reference it.\n\n---\n\n## Scope of Applicability\n\n- Applies to Core v1 under `smallfactory/core/v1/`.\n- Governs CLI behavior and Web UI features backed by Core v1.\n- Defines repository structure and file formats under this spec.\n\n---\n\n## Versioning Policy (SemVer)\n\n- We use Semantic Versioning: MAJOR.MINOR.PATCH.\n  - MAJOR: incompatible changes to the spec or API.\n  - MINOR: backward-compatible additions.\n  - PATCH: backward-compatible fixes and internal improvements.\n- Stability gates: DRAFT \u2192 RC \u2192 PROD.\n  - While DRAFT, breaking changes are permitted.\n  - Once PROD, breaking changes require a major version bump.\n\n---\n\n## Change Management Requirements\n\n- Assess every change against this specification.\n- If a change modifies or conflicts with this spec:", "mtime": 1754973798.9089708}, {"source": "smallfactory/core/v1/PLM_SPECIFICATION.md", "heading": "Change Management Requirements", "text": "n bump.\n\n---\n\n## Change Management Requirements\n\n- Assess every change against this specification.\n- If a change modifies or conflicts with this spec:\n  - Update this file in the same PR and bump version appropriately.\n  - Provide migration notes where feasible.\n- PRs should state: \"Specification compliant? Yes/No\" and link to this file.\n\n---\n\n## Optional: `.gitattributes` for LFS\n```", "mtime": 1754973798.9089708}, {"source": "smallfactory/core/v1/PLM_SPECIFICATION.md", "heading": "CAD + docs tracked by LFS", "text": "# CAD + docs tracked by LFS\n*.step filter=lfs diff=lfs merge=lfs -text\n*.stl  filter=lfs diff=lfs merge=lfs -text\n*.pdf  filter=lfs diff=lfs merge=lfs -text\n*.ipt  filter=lfs diff=lfs merge=lfs -text\n*.sldprt filter=lfs diff=lfs merge=lfs -text\n*.sldasm filter=lfs diff=lfs merge=lfs -text\n```", "mtime": 1754973798.9089708}], "idf": {"up": 3.8134107167600364, "all": 1.9675840262617057, "simple": 3.8134107167600364, "and": 1.4780358009429997, "steps": 3.8134107167600364, "bump": 3.5257286443082556, "for": 1.5108256237659907, "version": 2.966112856372833, "api": 2.7147984280919264, "smallfactory": 2.3470736479666092, "lifecycle": 3.302585092994046, "core": 2.83258146374831, "major": 3.302585092994046, "if": 1.9675840262617057, "lightweight": 3.8134107167600364, "md": 4.218875824868201, "we": 3.302585092994046, "lives": 3.302585092994046, "0": 3.5257286443082556, "specification": 3.5257286443082556, "semantic": 3.8134107167600364, "require": 3.8134107167600364, "draft": 3.302585092994046, "comply": 4.218875824868201, "in": 1.8209805520698303, "get": 3.302585092994046, "update": 2.7147984280919264, "versioning": 3.8134107167600364, "built": 2.966112856372833, "accordingly": 4.218875824868201, "extensibility": 4.218875824868201, "git": 2.3470736479666092, "simplicity": 4.218875824868201, "v1": 3.5257286443082556, "inventory": 1.6161861394238168, "breaking": 3.302585092994046, "a": 1.4462871026284194, "changes": 2.83258146374831, "sh": 3.302585092994046, "must": 2.5141277326297757, "few": 4.218875824868201, "quickstart": 4.218875824868201, "not": 2.2729656758128876, "product": 3.5257286443082556, "native": 2.7147984280919264, "use": 2.5141277326297757, "authoritative": 3.5257286443082556, "running": 3.8134107167600364, "system": 3.8134107167600364, "with": 1.867500567704723, "plm": 2.7147984280919264, "at": 2.2729656758128876, "management": 2.83258146374831, "transparency": 4.218875824868201, "the": 1.3566749439387324, "sf": 1.653926467406664, "initialize": 4.218875824868201, "new": 3.120263536200091, "init": 3.5257286443082556, "py": 1.9675840262617057, "repository": 2.966112856372833, "1": 2.139434283188365, "python3": 2.203972804325936, "data": 2.5141277326297757, "cap": 3.120263536200091, "shelf": 3.8134107167600364, "a1": 2.966112856372833, "recommended": 2.83258146374831, "location": 1.9675840262617057, "add": 2.6094379124341005, "2": 2.3470736479666092, "socket": 4.218875824868201, "m3x10": 2.4271163556401456, "item": 2.7147984280919264, "screw": 4.218875824868201, "l": 2.021651247531981, "canonical": 2.83258146374831, "name": 2.966112856372833, "create": 3.8134107167600364, "entities": 2.021651247531981, "p": 1.6931471805599454, "are": 1.9675840262617057, "sfid": 1.867500567704723, "required": 2.3470736479666092, "quantity": 2.83258146374831, "3": 2.5141277326297757, "10": 3.302585092994046, "performance": 4.218875824868201, "fields": 2.6094379124341005, "b2": 4.218875824868201, "custom": 3.5257286443082556, "racing": 4.218875824868201, "like": 3.5257286443082556, "high": 3.8134107167600364, "notes": 3.120263536200091, "prop": 4.218875824868201, "set": 2.83258146374831, "20": 4.218875824868201, "optional": 2.139434283188365, "your": 2.966112856372833, "4": 3.120263536200091, "view": 2.83258146374831, "ls": 3.5257286443082556, "5": 3.120263536200091, "of": 2.203972804325936, "specific": 3.120263536200091, "show": 3.8134107167600364, "details": 3.8134107167600364, "parts": 2.0788096613719302, "using": 3.302585092994046, "when": 2.6094379124341005, "6": 4.218875824868201, "adjust": 2.966112856372833, "entity": 2.2729656758128876, "912": 4.218875824868201, "din": 4.218875824868201, "shcs": 4.218875824868201, "7": 3.5257286443082556, "metadata": 2.83258146374831, "updated": 4.218875824868201, "8": 4.218875824868201, "status": 2.6094379124341005, "check": 4.218875824868201, "workflow": 4.218875824868201, "finds": 4.218875824868201, "cli": 2.5141277326297757, "follow": 3.8134107167600364, "understandable": 4.218875824868201, "controlled": 3.8134107167600364, "can": 2.6094379124341005, "format": 3.302585092994046, "ensuring": 4.218875824868201, "connected": 3.8134107167600364, "should": 3.302585092994046, "principles": 3.8134107167600364, "tooling": 2.6094379124341005, "integrity": 3.8134107167600364, "confusing": 4.218875824868201, "including": 3.8134107167600364, "to": 1.7765287894989963, "believe": 4.218875824868201, "note": 3.302585092994046, "errors": 3.8134107167600364, "decision": 4.218875824868201, "boms": 3.8134107167600364, "way": 4.218875824868201, "t": 3.5257286443082556, "doesn": 3.8134107167600364, "be": 2.4271163556401456, "person": 4.218875824868201, "powerful": 4.218875824868201, "it": 2.83258146374831, "default": 2.83258146374831, "avoiding": 4.218875824868201, "that": 2.6094379124341005, "yaml": 2.203972804325936, "consistent": 4.218875824868201, "so": 3.8134107167600364, "aware": 4.218875824868201, "coretools": 3.8134107167600364, "releases": 3.8134107167600364, "safely": 3.5257286443082556, "g": 2.203972804325936, "standard": 3.5257286443082556, "by": 2.203972804325936, "team": 4.218875824868201, "accessible": 4.218875824868201, "collaborators": 3.8134107167600364, "e": 2.139434283188365, "pulls": 3.8134107167600364, "is": 1.7339691750802007, "edit": 2.966112856372833, "every": 3.5257286443082556, "conventions": 3.120263536200091, "store": 3.8134107167600364, "first": 3.8134107167600364, "burdensome": 4.218875824868201, "automatically": 3.8134107167600364, "validate": 3.5257286443082556, "from": 2.203972804325936, "rule": 4.218875824868201, "readable": 2.966112856372833, "tools": 3.302585092994046, "revisions": 2.3470736479666092, "or": 1.9675840262617057, "json": 2.7147984280919264, "sync": 3.8134107167600364, "belong": 4.218875824868201, "stay": 3.8134107167600364, "minimal": 2.6094379124341005, "layout": 2.966112856372833, "manual": 3.5257286443082556, "pushes": 3.8134107167600364, "remote": 3.5257286443082556, "files": 2.139434283188365, "organize": 3.8134107167600364, "guided": 4.218875824868201, "you": 2.5141277326297757, "philosophy": 4.218875824868201, "this": 2.3470736479666092, "human": 2.83258146374831, "committed": 4.218875824868201, "what": 3.302585092994046, "structured": 4.218875824868201, "necessary": 4.218875824868201, "opinionated": 4.218875824868201, "on": 2.3470736479666092, "backward": 3.8134107167600364, "offline": 4.218875824868201, "friction": 3.8134107167600364, "defines": 3.5257286443082556, "open": 3.8134107167600364, "usability": 4.218875824868201, "runs": 3.8134107167600364, "he": 4.218875824868201, "repo": 2.966112856372833, "as": 2.3470736479666092, "unless": 3.5257286443082556, "will": 3.8134107167600364, "infrastructure": 3.8134107167600364, "global": 3.8134107167600364, "own": 3.5257286443082556, "defaults": 2.3470736479666092, "manager": 3.8134107167600364, "build": 2.6094379124341005, "operations": 3.5257286443082556, "formats": 3.120263536200091, "setup": 3.5257286443082556, "approach": 3.8134107167600364, "databases": 3.8134107167600364, "plain": 3.8134107167600364, "don": 4.218875824868201, "designed": 3.8134107167600364, "available": 3.8134107167600364, "invent": 4.218875824868201, "evolve": 4.218875824868201, "structure": 2.966112856372833, "workflows": 4.218875824868201, "have": 3.8134107167600364, "servers": 3.8134107167600364, "zero": 3.8134107167600364, "python": 2.966112856372833, "connection": 4.218875824868201, "environment": 3.8134107167600364, "anywhere": 3.5257286443082556, "special": 3.8134107167600364, "much": 4.218875824868201, "no": 2.0788096613719302, "compatible": 3.8134107167600364, "our": 3.8134107167600364, "anyone": 3.5257286443082556, "tool": 3.8134107167600364, "carefully": 4.218875824868201, "strict": 3.8134107167600364, "package": 3.8134107167600364, "restored": 4.218875824868201, "their": 3.5257286443082556, "top": 2.83258146374831, "try": 3.302585092994046, "extensible": 3.5257286443082556, "just": 3.5257286443082556, "then": 2.966112856372833, "portability": 4.218875824868201, "flake8": 4.218875824868201, "run": 3.302585092994046, "complex": 4.218875824868201, "editor": 4.218875824868201, "dev": 4.218875824868201, "main": 3.8134107167600364, "included": 3.302585092994046, "contributors": 4.218875824868201, "clone": 3.8134107167600364, "cloud": 4.218875824868201, "them": 3.8134107167600364, "started": 3.8134107167600364, "testing": 4.218875824868201, "easy": 4.218875824868201, "made": 4.218875824868201, "requirements": 3.120263536200091, "extra": 3.8134107167600364, "pip": 3.5257286443082556, "script": 4.218875824868201, "install": 3.120263536200091, "end": 3.5257286443082556, "needed": 3.8134107167600364, "listed": 4.218875824868201, "seconds": 3.8134107167600364, "readability": 4.218875824868201, "pytest": 4.218875824868201, "command": 4.218875824868201, "one": 2.7147984280919264, "but": 3.302585092994046, "virtualenvs": 3.8134107167600364, "directly": 3.8134107167600364, "runnable": 4.218875824868201, "single": 2.966112856372833, "any": 3.5257286443082556, "file": 1.9675840262617057, "everything": 4.218875824868201, "text": 2.6094379124341005, "means": 3.302585092994046, "friendly": 3.8134107167600364, "dependencies": 3.8134107167600364, "txt": 3.5257286443082556, "users": 3.8134107167600364, "executable": 4.218875824868201, "machine": 3.5257286443082556, "r": 3.5257286443082556, "want": 3.5257286443082556, "supported": 3.120263536200091, "linting": 3.8134107167600364, "public": 4.218875824868201, "consistently": 3.8134107167600364, "its": 3.8134107167600364, "implementations": 4.218875824868201, "where": 3.302585092994046, "works": 4.218875824868201, "offers": 4.218875824868201, "always": 3.120263536200091, "introduced": 4.218875824868201, "clearly": 4.218875824868201, "directory": 2.7147984280919264, "helps": 4.218875824868201, "do": 2.6094379124341005, "reference": 3.302585092994046, "folder": 4.218875824868201, "initialized": 4.218875824868201, "each": 2.6094379124341005, "private": 4.218875824868201, "documentation": 3.8134107167600364, "concept": 4.218875824868201, "control": 3.8134107167600364, "normal": 4.218875824868201, "added": 3.8134107167600364, "tracking": 3.5257286443082556, "level": 3.302585092994046, "datarepo": 4.218875824868201, "directories": 2.83258146374831, "manage": 3.8134107167600364, "programmatic": 4.218875824868201, "they": 4.218875824868201, "spec": 3.302585092994046, "provides": 4.218875824868201, "delete": 2.966112856372833, "procurement": 4.218875824868201, "items": 3.120263536200091, "organized": 4.218875824868201, "id": 2.966112856372833, "contains": 3.5257286443082556, "etc": 3.302585092994046, "capabilities": 3.8134107167600364, "how": 4.218875824868201, "stores": 4.218875824868201, "track": 4.218875824868201, "age": 4.218875824868201, "holds": 3.8134107167600364, "operational": 3.8134107167600364, "organization": 4.218875824868201, "yml": 1.916290731874155, "100": 4.218875824868201, "commits": 3.8134107167600364, "non": 3.302585092994046, "automatic": 4.218875824868201, "detailed": 3.8134107167600364, "flexible": 4.218875824868201, "integration": 3.8134107167600364, "quantities": 2.966112856372833, "output": 3.120263536200091, "stock": 4.218875824868201, "restocking": 4.218875824868201, "tables": 4.218875824868201, "adds": 4.218875824868201, "lets": 4.218875824868201, "stored": 3.302585092994046, "under": 2.966112856372833, "an": 2.4271163556401456, "state": 3.120263536200091, "usage": 4.218875824868201, "stages": 4.218875824868201, "beyond": 3.8134107167600364, "existing": 3.8134107167600364, "multiple": 4.218875824868201, "rm": 3.8134107167600364, "increment": 4.218875824868201, "across": 3.8134107167600364, "integer": 4.218875824868201, "list": 3.120263536200091, "given": 3.8134107167600364, "remove": 3.8134107167600364, "via": 3.8134107167600364, "hand": 2.83258146374831, "entries": 3.120263536200091, "names": 3.302585092994046, "f": 3.5257286443082556, "start": 3.120263536200091, "confirmation": 3.5257286443082556, "live": 4.218875824868201, "display": 4.218875824868201, "mode": 3.5257286443082556, "decrement": 4.218875824868201, "attributes": 3.8134107167600364, "prompts": 3.8134107167600364, "table": 4.218875824868201, "locations": 3.5257286443082556, "argument": 4.218875824868201, "full": 3.8134107167600364, "help": 4.218875824868201, "see": 3.8134107167600364, "options": 4.218875824868201, "features": 3.302585092994046, "future": 3.8134107167600364, "configured": 4.218875824868201, "ensure": 3.8134107167600364, "accommodate": 4.218875824868201, "interface": 3.5257286443082556, "cd": 3.5257286443082556, "css": 4.218875824868201, "information": 4.218875824868201, "modern": 4.218875824868201, "tailwind": 4.218875824868201, "search": 4.218875824868201, "modules": 3.8134107167600364, "responsive": 4.218875824868201, "dashboard": 3.8134107167600364, "design": 4.218875824868201, "filtering": 4.218875824868201, "quick": 3.8134107167600364, "overview": 4.218875824868201, "clean": 4.218875824868201, "ui": 3.302585092994046, "web": 2.7147984280919264, "stats": 4.218875824868201, "bash": 3.120263536200091, "recent": 4.218875824868201, "make": 3.8134107167600364, "server": 3.8134107167600364, "sure": 4.218875824868201, "8080": 3.5257286443082556, "root": 4.218875824868201, "port": 3.5257286443082556, "project": 3.8134107167600364, "app": 4.218875824868201, "flask": 4.218875824868201, "leverages": 3.8134107167600364, "template": 3.8134107167600364, "browser": 4.218875824868201, "imports": 4.218875824868201, "env": 4.218875824868201, "index": 3.8134107167600364, "application": 4.218875824868201, "routes": 3.8134107167600364, "debug": 4.218875824868201, "http": 3.5257286443082556, "reload": 4.218875824868201, "architecture": 4.218875824868201, "jinja2": 4.218875824868201, "html": 4.218875824868201, "base": 3.120263536200091, "elements": 4.218875824868201, "page": 4.218875824868201, "development": 4.218875824868201, "templates": 4.218875824868201, "import": 4.218875824868201, "common": 3.8134107167600364, "navigation": 4.218875824868201, "auto": 3.8134107167600364, "uses": 3.5257286443082556, "consistency": 3.8134107167600364, "localhost": 3.5257286443082556, "entrypoint": 4.218875824868201, "ensures": 3.8134107167600364, "access": 4.218875824868201, "vl": 4.218875824868201, "download": 4.218875824868201, "brew": 4.218875824868201, "ollama": 3.8134107167600364, "extensions": 4.218875824868201, "module": 4.218875824868201, "call": 3.8134107167600364, "assume": 3.8134107167600364, "homebrew": 4.218875824868201, "override": 3.8134107167600364, "supplier": 3.302585092994046, "5vl": 3.8134107167600364, "https": 4.218875824868201, "3b": 3.8134107167600364, "macos": 4.218875824868201, "talk": 3.8134107167600364, "instruct": 4.218875824868201, "configure": 3.8134107167600364, "11434": 3.8134107167600364, "serve": 4.218875824868201, "curl": 3.8134107167600364, "local": 3.8134107167600364, "additional": 4.218875824868201, "reporting": 4.218875824868201, "document": 4.218875824868201, "vision": 3.8134107167600364, "pattern": 4.218875824868201, "hosted": 4.218875824868201, "quality": 4.218875824868201, "tags": 3.8134107167600364, "com": 4.218875824868201, "recommend": 4.218875824868201, "2b": 4.218875824868201, "linux": 4.218875824868201, "same": 3.5257286443082556, "verify": 4.218875824868201, "llm": 4.218875824868201, "vlm": 4.218875824868201, "pull": 4.218875824868201, "bom": 2.4271163556401456, "qwen2": 3.8134107167600364, "visual": 4.218875824868201, "model": 3.8134107167600364, "analytics": 4.218875824868201, "ost": 4.218875824868201, "image": 4.218875824868201, "path": 2.7147984280919264, "deps": 4.218875824868201, "extract": 4.218875824868201, "sentences": 4.218875824868201, "post": 2.966112856372833, "generic": 4.218875824868201, "contents": 3.8134107167600364, "pulled": 4.218875824868201, "s": 2.7147984280919264, "jpg": 4.218875824868201, "error": 3.302585092994046, "host": 4.218875824868201, "invoice": 4.218875824868201, "summarize": 4.218875824868201, "part": 1.9675840262617057, "export": 3.5257286443082556, "jq": 4.218875824868201, "prompt": 4.218875824868201, "url": 4.218875824868201, "ask": 4.218875824868201, "x": 4.218875824868201, "per": 2.4271163556401456, "assemblies": 3.5257286443082556, "separate": 3.5257286443082556, "finished": 2.5141277326297757, "serials": 2.966112856372833, "workorders": 3.120263536200091, "i": 3.8134107167600364, "unit": 2.83258146374831, "here": 3.8134107167600364, "truth": 3.5257286443082556, "work": 3.302585092994046, "standalone": 4.218875824868201, "source": 3.120263536200091, "generated": 2.5141277326297757, "until": 4.218875824868201, "pointer": 3.302585092994046, "v0": 3.5257286443082556, "goals": 4.218875824868201, "prod": 3.8134107167600364, "journals": 2.966112856372833, "current": 3.120263536200091, "records": 3.8134107167600364, "orders": 3.302585092994046, "permitted": 3.8134107167600364, "namespace": 4.218875824868201, "skus": 3.302585092994046, "immutable": 3.302585092994046, "caches": 3.302585092994046, "inside": 3.5257286443082556, "released": 2.203972804325936, "config": 2.966112856372833, "below": 3.8134107167600364, "created": 3.8134107167600364, "selects": 4.218875824868201, "time": 3.302585092994046, "vs": 3.8134107167600364, "schema": 3.5257286443082556, "snapshots": 3.8134107167600364, "inferred": 2.966112856372833, "flat": 3.8134107167600364, "goods": 2.5141277326297757, "working": 4.218875824868201, "hashes": 3.8134107167600364, "once": 3.302585092994046, "cut": 3.5257286443082556, "copied": 4.218875824868201, "refs": 2.4271163556401456, "area": 4.218875824868201, "read": 3.5257286443082556, "important": 3.8134107167600364, "small": 3.8134107167600364, "select": 3.8134107167600364, "containing": 3.302585092994046, "prescribed": 4.218875824868201, "label": 2.83258146374831, "progress": 4.218875824868201, "commit": 2.966112856372833, "there": 3.5257286443082556, "artifact": 3.8134107167600364, "rev": 2.4271163556401456, "only": 2.4271163556401456, "intentions": 4.218875824868201, "updates": 3.120263536200091, "substructure": 4.218875824868201, "revision": 2.6094379124341005, "pointers": 3.302585092994046, "especially": 4.218875824868201, "cad": 3.302585092994046, "goes": 4.218875824868201, "rds": 4.218875824868201, "into": 3.8134107167600364, "meta": 3.8134107167600364, "these": 3.8134107167600364, "edits": 3.8134107167600364, "treat": 3.120263536200091, "avoid": 3.8134107167600364, "snapshot": 2.83258146374831, "journal": 3.120263536200091, "events": 3.5257286443082556, "date": 4.218875824868201, "qty": 2.3470736479666092, "builds": 3.5257286443082556, "ulid": 3.120263536200091, "resolved": 3.5257286443082556, "onhand": 2.7147984280919264, "lock": 2.966112856372833, "site": 3.8134107167600364, "recap": 4.218875824868201, "totals": 4.218875824868201, "deltas": 4.218875824868201, "omitted": 2.6094379124341005, "derived": 3.302585092994046, "sku": 2.7147984280919264, "writes": 3.5257286443082556, "append": 3.302585092994046, "ndjson": 3.120263536200091, "year": 3.5257286443082556, "minimum": 4.218875824868201, "captured": 4.218875824868201, "over": 3.302585092994046, "reproducible": 3.8134107167600364, "home": 4.218875824868201, "order": 3.302585092994046, "recording": 3.8134107167600364, "referenced": 4.218875824868201, "bool": 4.218875824868201, "ea": 2.6094379124341005, "form": 4.218875824868201, "string": 4.218875824868201, "phantom": 4.218875824868201, "attrs": 3.8134107167600364, "may": 3.302585092994046, "policy": 2.7147984280919264, "voltage": 3.302585092994046, "buy": 2.83258146374831, "array": 4.218875824868201, "240": 4.218875824868201, "explicit": 3.120263536200091, "tatus": 4.218875824868201, "object": 3.8134107167600364, "uom": 2.4271163556401456, "free": 4.218875824868201, "120": 3.5257286443082556, "number": 3.5257286443082556, "invalid": 3.5257286443082556, "selector": 3.5257286443082556, "group": 3.302585092994046, "accepted": 3.5257286443082556, "children": 3.5257286443082556, "b": 3.120263536200091, "based": 3.8134107167600364, "dynamic": 4.218875824868201, "field": 3.120263536200091, "gate": 4.218875824868201, "adapter": 3.5257286443082556, "include": 2.6094379124341005, "unavailable": 4.218875824868201, "alt": 4.218875824868201, "prefix": 3.302585092994046, "kinds": 3.8134107167600364, "inference": 3.8134107167600364, "linter": 3.302585092994046, "alternates": 3.302585092994046, "sup": 3.120263536200091, "kind": 3.120263536200091, "later": 4.218875824868201, "conditions": 4.218875824868201, "define": 3.5257286443082556, "recognized": 3.5257286443082556, "primary": 3.8134107167600364, "appears": 4.218875824868201, "iso": 4.218875824868201, "match": 3.8134107167600364, "infers": 4.218875824868201, "family": 4.218875824868201, "evaluated": 4.218875824868201, "aliases": 3.5257286443082556, "legacy": 3.302585092994046, "prefixes": 3.302585092994046, "motor": 4.218875824868201, "more": 4.218875824868201, "validation": 3.8134107167600364, "boilerplate": 4.218875824868201, "sparse": 4.218875824868201, "having": 3.5257286443082556, "resolver": 3.120263536200091, "efaults": 4.218875824868201, "very": 4.218875824868201, "implicit": 2.83258146374831, "treats": 4.218875824868201, "has": 3.5257286443082556, "purchased": 4.218875824868201, "10uf": 3.302585092994046, "minimize": 4.218875824868201, "allowed": 3.302585092994046, "line": 2.83258146374831, "0012": 4.218875824868201, "10v": 4.218875824868201, "aa": 4.218875824868201, "123": 4.218875824868201, "3c2a0f4": 4.218875824868201, "sha256": 4.218875824868201, "4c5e": 4.218875824868201, "1a7f": 4.218875824868201, "slots": 4.218875824868201, "pdf": 3.5257286443082556, "such": 3.302585092994046, "drawing": 4.218875824868201, "record": 3.302585092994046, "tolerance": 4.218875824868201, "2025": 3.120263536200091, "role": 4.218875824868201, "used": 3.5257286443082556, "abc": 4.218875824868201, "eco": 3.5257286443082556, "10t19": 3.8134107167600364, "step": 3.5257286443082556, "59": 4.218875824868201, "08": 3.120263536200091, "artifacts": 4.218875824868201, "accept": 4.218875824868201, "mpn": 3.5257286443082556, "obsolete": 4.218875824868201, "change": 3.120263536200091, "dir": 4.218875824868201, "produced": 4.218875824868201, "2mm": 4.218875824868201, "sha": 4.218875824868201, "00z": 3.302585092994046, "relative": 4.218875824868201, "suggested": 4.218875824868201, "40": 3.8134107167600364, "us": 4.218875824868201, "rules": 3.8134107167600364, "exact": 3.8134107167600364, "upc": 4.218875824868201, "frozen": 4.218875824868201, "000123": 3.8134107167600364, "efs": 4.218875824868201, "region": 4.218875824868201, "123456789012": 4.218875824868201, "revs": 4.218875824868201, "black": 3.302585092994046, "workorder": 3.302585092994046, "color": 4.218875824868201, "toaster": 3.302585092994046, "copy": 4.218875824868201, "passed": 4.218875824868201, "toast": 4.218875824868201, "c": 3.8134107167600364, "opened": 4.218875824868201, "9": 3.8134107167600364, "120v": 3.5257286443082556, "mvp": 4.218875824868201, "0001": 4.218875824868201, "25": 4.218875824868201, "regex": 4.218875824868201, "subcodes": 3.8134107167600364, "z0": 3.8134107167600364, "pass": 4.218875824868201, "naming": 4.218875824868201, "64": 4.218875824868201, "prefer": 3.120263536200091, "action": 4.218875824868201, "01j9z9q6h3j6nrs4k1yv3m8u5k": 4.218875824868201, "stm32": 3.8134107167600364, "result": 4.218875824868201, "normative": 4.218875824868201, "serial": 3.302585092994046, "hyphens": 3.8134107167600364, "classification": 3.8134107167600364, "test": 4.218875824868201, "z": 4.218875824868201, "lockfile": 4.218875824868201, "sanjose": 4.218875824868201, "bin7": 4.218875824868201, "223": 4.218875824868201, "ts": 3.8134107167600364, "line1": 3.8134107167600364, "12": 4.218875824868201, "fg": 3.5257286443082556, "10t20": 4.218875824868201, "33z": 4.218875824868201, "interpreted": 3.5257286443082556, "examples": 4.218875824868201, "txn": 3.5257286443082556, "derives": 4.218875824868201, "backdating": 3.8134107167600364, "receipt": 4.218875824868201, "rts": 4.218875824868201, "lot23": 4.218875824868201, "01j9z6t9s2b3hqx5wam4r2f3g6": 4.218875824868201, "reason": 3.302585092994046, "classifications": 4.218875824868201, "delta": 2.83258146374831, "cache": 3.8134107167600364, "01j9z6y9m8k7c1p2d3f4h5j6k7": 4.218875824868201, "16": 4.218875824868201, "inbox": 3.120263536200091, "issue": 4.218875824868201, "entry": 3.8134107167600364, "200": 4.218875824868201, "separated": 4.218875824868201, "embedded": 4.218875824868201, "sn39402": 4.218875824868201, "fills": 3.8134107167600364, "wise": 4.218875824868201, "idempotency": 4.218875824868201, "sfdatarepo": 3.8134107167600364, "sfids": 3.302585092994046, "repeat": 4.218875824868201, "sum": 4.218875824868201, "present": 3.8134107167600364, "union": 3.5257286443082556, "lines": 4.218875824868201, "o": 3.8134107167600364, "write": 3.8134107167600364, "example": 3.302585092994046, "merges": 3.8134107167600364, "identity": 3.5257286443082556, "input": 3.5257286443082556, "appends": 4.218875824868201, "safe": 4.218875824868201, "conceptual": 3.8134107167600364, "user": 3.8134107167600364, "after": 4.218875824868201, "01j9zcd": 4.218875824868201, "reduce": 3.8134107167600364, "exist": 3.8134107167600364, "n": 3.302585092994046, "rebuild": 3.302585092994046, "conflicts": 3.302585092994046, "serialized": 4.218875824868201, "hint": 4.218875824868201, "merge": 3.5257286443082556, "reverse": 4.218875824868201, "edited": 3.5257286443082556, "logs": 4.218875824868201, "1k": 4.218875824868201, "684": 4.218875824868201, "gitattributes": 3.8134107167600364, "appendix": 3.8134107167600364, "total": 3.8134107167600364, "500": 4.218875824868201, "15": 3.8134107167600364, "behavior": 3.302585092994046, "10t21": 3.8134107167600364, "regenerates": 4.218875824868201, "res": 4.218875824868201, "both": 3.5257286443082556, "184": 3.8134107167600364, "against": 3.5257286443082556, "target": 4.218875824868201, "during": 4.218875824868201, "overall": 4.218875824868201, "labels": 4.218875824868201, "missing": 3.302585092994046, "map": 4.218875824868201, "determine": 4.218875824868201, "algorithm": 4.218875824868201, "deterministic": 4.218875824868201, "depth": 4.218875824868201, "skip": 4.218875824868201, "walk": 4.218875824868201, "fully": 4.218875824868201, "measure": 4.218875824868201, "load": 4.218875824868201, "evaluate": 4.218875824868201, "optionally": 4.218875824868201, "tree": 4.218875824868201, "none": 3.5257286443082556, "member": 4.218875824868201, "resolve": 3.5257286443082556, "docs": 3.8134107167600364, "return": 4.218875824868201, "respecting": 4.218875824868201, "commands": 4.218875824868201, "surface": 4.218875824868201, "mint": 3.8134107167600364, "exports": 4.218875824868201, "pick": 4.218875824868201, "nested": 4.218875824868201, "desired": 4.218875824868201, "release": 3.8134107167600364, "does": 4.218875824868201, "chosen": 3.5257286443082556, "flattened": 4.218875824868201, "valid": 3.302585092994046, "accumulate": 4.218875824868201, "treated": 3.8134107167600364, "appear": 4.218875824868201, "constraints": 3.8134107167600364, "referential": 4.218875824868201, "which": 4.218875824868201, "determines": 4.218875824868201, "key": 4.218875824868201, "lint": 4.218875824868201, "clear": 4.218875824868201, "retired": 4.218875824868201, "persists": 4.218875824868201, "even": 4.218875824868201, "binaries": 4.218875824868201, "history": 4.218875824868201, "tracked": 3.8134107167600364, "reused": 4.218875824868201, "storage": 4.218875824868201, "stl": 3.8134107167600364, "never": 4.218875824868201, "globally": 4.218875824868201, "affect": 4.218875824868201, "mutating": 4.218875824868201, "advance": 4.218875824868201, "deletion": 4.218875824868201, "message": 3.8134107167600364, "forever": 4.218875824868201, "world": 4.218875824868201, "flip": 4.218875824868201, "audit": 4.218875824868201, "trail": 4.218875824868201, "serves": 4.218875824868201, "posts": 3.8134107167600364, "unique": 4.218875824868201, "lfs": 3.5257286443082556, "marking": 4.218875824868201, "messages": 4.218875824868201, "large": 4.218875824868201, "tokens": 3.8134107167600364, "inputs": 4.218875824868201, "external": 3.8134107167600364, "integrations": 4.218875824868201, "performs": 4.218875824868201, "direct": 4.218875824868201, "mutations": 4.218875824868201, "refers": 4.218875824868201, "dirs": 4.218875824868201, "defaulting": 4.218875824868201, "predictable": 4.218875824868201, "keep": 3.8134107167600364, "ids": 3.8134107167600364, "branding": 4.218875824868201, "identifiers": 3.8134107167600364, "stable": 4.218875824868201, "numbers": 3.8134107167600364, "determinism": 4.218875824868201, "within": 4.218875824868201, "ntity": 4.218875824868201, "uppercase": 4.218875824868201, "terminology": 4.218875824868201, "reads": 4.218875824868201, "modes": 4.218875824868201, "lowercase": 4.218875824868201, "support": 4.218875824868201, "manufacturer": 3.8134107167600364, "identifier": 4.218875824868201, "interfaces": 4.218875824868201, "scripts": 4.218875824868201, "outputs": 4.218875824868201, "results": 4.218875824868201, "facing": 4.218875824868201, "produce": 4.218875824868201, "provided": 3.8134107167600364, "shapes": 4.218875824868201, "applied": 4.218875824868201, "validated": 4.218875824868201, "traverse": 4.218875824868201, "ergonomics": 4.218875824868201, "omit": 4.218875824868201, "happy": 4.218875824868201, "defaulted": 4.218875824868201, "mismatch": 4.218875824868201, "tiny": 4.218875824868201, "explain": 4.218875824868201, "keys": 4.218875824868201, "produces": 4.218875824868201, "incompatible": 4.218875824868201, "recipe": 4.218875824868201, "stability": 4.218875824868201, "ter": 4.218875824868201, "patch": 4.218875824868201, "semver": 4.218875824868201, "backed": 4.218875824868201, "governs": 4.218875824868201, "improvements": 4.218875824868201, "gates": 4.218875824868201, "applies": 4.218875824868201, "fixes": 4.218875824868201, "modifies": 3.8134107167600364, "rc": 4.218875824868201, "internal": 4.218875824868201, "while": 4.218875824868201, "assess": 3.8134107167600364, "minor": 4.218875824868201, "scope": 4.218875824868201, "applicability": 4.218875824868201, "additions": 4.218875824868201, "provide": 4.218875824868201, "link": 4.218875824868201, "pr": 4.218875824868201, "appropriately": 4.218875824868201, "prs": 4.218875824868201, "feasible": 4.218875824868201, "compliant": 4.218875824868201, "yes": 4.218875824868201, "migration": 4.218875824868201, "filter": 4.218875824868201, "diff": 4.218875824868201, "sldprt": 4.218875824868201, "sldasm": 4.218875824868201, "ipt": 4.218875824868201}}