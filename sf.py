#!/usr/bin/env python3
"""
smallfactory CLI tool (sf.py)

Minimal, portable, zero-infrastructure PLM management.
"""
import sys
import os
import argparse
import pathlib
import subprocess
import json
import yaml

SF_TOOL_VERSION = "1.0"

CONFIG_FILENAME = ".smallfactory.yml"
DATAREPO_CONFIG_FILENAME = "sfdatarepo.yml"


def git_commit_and_push(repo_path, file_path, message):
    """
    Stage file_path, commit with message, and push if origin exists.
    """
    try:
        subprocess.run(["git", "add", str(file_path)], cwd=repo_path, check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        subprocess.run(["git", "commit", "-m", message], cwd=repo_path, check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        # Check if origin exists
        remotes = subprocess.run(["git", "remote"], cwd=repo_path, capture_output=True, text=True)
        if "origin" in remotes.stdout.split():
            subprocess.run(["git", "push", "origin", "HEAD"], cwd=repo_path, check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    except subprocess.CalledProcessError:
        print("[smallfactory] Warning: Failed to commit or push changes to git.")


def ensure_config():
    """Checks for a local .smallfactory.yml config file; creates one if missing."""
    config_path = pathlib.Path(CONFIG_FILENAME)
    if not config_path.exists():
        config = {"default_datarepo": None}
        with open(config_path, "w") as f:
            yaml.safe_dump(config, f)
        print(f"[smallfactory] Created default config at {CONFIG_FILENAME}")

def get_datarepo_path():
    """Loads the default datarepo path from .smallfactory.yml."""
    config_path = pathlib.Path(CONFIG_FILENAME)
    if not config_path.exists():
        print(f"[smallfactory] Error: {CONFIG_FILENAME} not found. Run 'create' first.")
        sys.exit(1)
    with open(config_path) as f:
        config = yaml.safe_load(f)
    datarepo = config.get("default_datarepo")
    if not datarepo:
        print(f"[smallfactory] Error: default_datarepo not set in {CONFIG_FILENAME}. Run 'create' or set it manually.")
        sys.exit(1)
    return pathlib.Path(datarepo).expanduser().resolve()


def create_datarepo(target_path):
    """Creates a new datarepo, optionally connecting to a GitHub remote using only git."""
    repo_path = pathlib.Path(target_path).expanduser().resolve()
    repo_path.mkdir(parents=True, exist_ok=True)
    subprocess.run(["git", "init"], cwd=repo_path)
    print(f"[smallfactory] Initialized git repository at {repo_path}")

    # Optionally add GitHub remote
    print("\nTo sync with GitHub, first create a new empty repository in your GitHub account (https://github.com/new).\n")
    github_url = input("Paste the new GitHub repository URL here (or leave blank to skip): ").strip()
    if github_url:
        subprocess.run(["git", "remote", "add", "origin", github_url], cwd=repo_path)
        print(f"[smallfactory] Set origin remote to {github_url}")
    else:
        print("[smallfactory] Skipped setting GitHub origin.")

    # Create datarepo config
    datarepo_config = {"smallfactory_version": SF_TOOL_VERSION}
    config_file = repo_path / DATAREPO_CONFIG_FILENAME
    with open(config_file, "w") as f:
        f.write("# This file is auto-generated by smallfactory. Do not modify it manually.\n")
        yaml.safe_dump(datarepo_config, f)
    print(f"[smallfactory] Created datarepo config at {config_file}")

    # Update default_datarepo in .smallfactory.yml
    config_path = pathlib.Path(CONFIG_FILENAME)
    with open(config_path) as f:
        config = yaml.safe_load(f)
    config["default_datarepo"] = str(repo_path)
    with open(config_path, "w") as f:
        yaml.safe_dump(config, f)
    print(f"[smallfactory] Set default_datarepo to {repo_path} in {CONFIG_FILENAME}")

    # Commit and push if remote exists
    subprocess.run(["git", "add", DATAREPO_CONFIG_FILENAME], cwd=repo_path)
    subprocess.run(["git", "commit", "-m", "Initial smallfactory datarepo config"], cwd=repo_path)
    remotes = subprocess.run(["git", "remote"], cwd=repo_path, capture_output=True, text=True)
    if "origin" in remotes.stdout and github_url:
        subprocess.run(["git", "branch", "-M", "main"], cwd=repo_path)
        subprocess.run(["git", "push", "-u", "origin", "main"], cwd=repo_path)
        print("[smallfactory] Pushed initial commit to GitHub.")
    else:
        print("[smallfactory] No remote set. You can add one later with git remote add origin <url>.")


def create_github_repo_interactive(repo_path):
    """Prompts user to create a GitHub repo and set as origin."""
    print("\nTo sync with GitHub, please create a new repository in your GitHub account.")
    print("You can do this at: https://github.com/new")
    url = input("Paste the new GitHub repository URL here (or leave blank to skip): ").strip()
    if url:
        subprocess.run(["git", "remote", "add", "origin", url], cwd=repo_path)
        print(f"[smallfactory] Set origin remote to {url}")
    else:
        print("[smallfactory] Skipped setting GitHub origin.")


def create_inventory_dir(datarepo_path):
    """Creates the inventory directory in the given datarepo path."""
    inventory_dir = datarepo_path / "inventory"
    inventory_dir.mkdir(parents=True, exist_ok=True)
    print(f"[smallfactory] Created inventory directory at {inventory_dir}")


def main():
    parser = argparse.ArgumentParser(description="smallfactory CLI")
    subparsers = parser.add_subparsers(dest="command")

    # create command
    create_parser = subparsers.add_parser("create", help="Create a new datarepo at the given path")
    create_parser.add_argument("path", nargs="?", default=None, help="Target directory for new datarepo (optional)")


    # inventory-add
    add_parser = subparsers.add_parser("inventory-add", help="Add a new inventory item")
    add_parser.add_argument("sku", help="Stock Keeping Unit (unique id)")
    add_parser.add_argument("name", help="Item name")
    add_parser.add_argument("quantity", type=int, help="Initial quantity")
    add_parser.add_argument("location", help="Storage location")
    add_parser.add_argument("-o", "--output", choices=["human", "json", "yaml"], default="human", help="Output format")

    # inventory-list
    list_parser = subparsers.add_parser("inventory-list", help="List all inventory items")
    list_parser.add_argument("-o", "--output", choices=["human", "json", "yaml"], default="human", help="Output format")

    # inventory-view
    view_parser = subparsers.add_parser("inventory-view", help="View details of an inventory item")
    view_parser.add_argument("sku", help="SKU of the item to view")
    view_parser.add_argument("-o", "--output", choices=["human", "json", "yaml"], default="human", help="Output format")

    # inventory-update
    update_parser = subparsers.add_parser("inventory-update", help="Update an inventory item")
    update_parser.add_argument("sku", help="SKU of the item to update")
    update_parser.add_argument("field", help="Field to update (name, quantity, location)")
    update_parser.add_argument("value", help="New value for the field")
    update_parser.add_argument("-o", "--output", choices=["human", "json", "yaml"], default="human", help="Output format")

    # inventory-delete
    delete_parser = subparsers.add_parser("inventory-delete", help="Delete an inventory item")
    delete_parser.add_argument("sku", help="SKU of the item to delete")
    delete_parser.add_argument("-o", "--output", choices=["human", "json", "yaml"], default="human", help="Output format")

    # inventory-adjust
    adjust_parser = subparsers.add_parser("inventory-adjust", help="Adjust the stock level of an inventory item")
    adjust_parser.add_argument("sku", help="SKU of the item to adjust")
    adjust_parser.add_argument("delta", type=int, help="Amount to adjust (positive or negative)")
    adjust_parser.add_argument("-o", "--output", choices=["human", "json", "yaml"], default="human", help="Output format")

    args = parser.parse_args()

    ensure_config()

    def cmd_create(args):
        # Step 1: Ask for GitHub URL
        github_url = input("Paste the GitHub repository URL to clone (or leave blank to create a new repo): ").strip()
        default_dir = "smallfactorydatarepo"
        local_dir = input(f"Enter the local directory for the datarepo [{default_dir}]: ").strip() or default_dir
        if os.path.exists(local_dir) and os.listdir(local_dir):
            print(f"[smallfactory] Error: Directory '{local_dir}' already exists and is not empty.")
            sys.exit(1)
        if github_url:
            subprocess.run(["git", "clone", github_url, local_dir], check=True)
            print(f"[smallfactory] Cloned {github_url} into {local_dir}")
            repo_path = pathlib.Path(local_dir).expanduser().resolve()
        else:
            repo_path = pathlib.Path(local_dir).expanduser().resolve()
            repo_path.mkdir(parents=True, exist_ok=True)
            subprocess.run(["git", "init"], cwd=repo_path)
            print(f"[smallfactory] Initialized git repository at {repo_path}")
        # Step 4: Continue with datarepo config and inventory dir
        # Create datarepo config
        datarepo_config = {"smallfactory_version": SF_TOOL_VERSION}
        config_file = repo_path / DATAREPO_CONFIG_FILENAME
        with open(config_file, "w") as f:
            f.write("# This file is auto-generated by smallfactory. Do not modify it manually.\n")
            yaml.safe_dump(datarepo_config, f)
        print(f"[smallfactory] Created datarepo config at {config_file}")
        # Update default_datarepo in .smallfactory.yml
        config_path = pathlib.Path(CONFIG_FILENAME)
        with open(config_path) as f:
            config = yaml.safe_load(f)
        config["default_datarepo"] = str(repo_path)
        with open(config_path, "w") as f:
            yaml.safe_dump(config, f)
        print(f"[smallfactory] Set default_datarepo to {repo_path} in {CONFIG_FILENAME}")
        create_inventory_dir(repo_path)
        # If cloned, skip remote setup (already present). If new, optionally prompt to add remote.
        if not github_url:
            add_remote = input("Would you like to add a GitHub remote now? [y/N]: ").strip().lower()
            if add_remote in ("y", "yes"):
                remote_url = input("Paste the GitHub repository URL here: ").strip()
                if remote_url:
                    subprocess.run(["git", "remote", "add", "origin", remote_url], cwd=repo_path)
                    print(f"[smallfactory] Set origin remote to {remote_url}")
        # Commit and push if remote exists
        subprocess.run(["git", "add", DATAREPO_CONFIG_FILENAME], cwd=repo_path)
        subprocess.run(["git", "commit", "-m", "Initial smallfactory datarepo config"], cwd=repo_path)
        remotes = subprocess.run(["git", "remote"], cwd=repo_path, capture_output=True, text=True)
        if "origin" in remotes.stdout:
            subprocess.run(["git", "branch", "-M", "main"], cwd=repo_path)
            try:
                subprocess.run(["git", "push", "-u", "origin", "main"], cwd=repo_path)
                print("[smallfactory] Pushed initial commit to GitHub.")
            except Exception:
                print("[smallfactory] Warning: Could not push to GitHub remote.")
        else:
            print("[smallfactory] No remote set. You can add one later with git remote add origin <url>.")

    def cmd_inventory_init(args):
        create_inventory_dir(get_datarepo_path())

    def cmd_inventory_add(args):
        datarepo_path = get_datarepo_path()
        inventory_dir = datarepo_path / "inventory"
        item_file = inventory_dir / f"{args.sku}.yml"
        if item_file.exists():
            print(f"[smallfactory] Error: Inventory item with SKU '{args.sku}' already exists.")
            sys.exit(1)
        item = {
            "sku": args.sku,
            "name": args.name,
            "quantity": args.quantity,
            "location": args.location
        }
        with open(item_file, "w") as f:
            yaml.safe_dump(item, f)
        commit_msg = (f"[smallfactory] Added inventory item {args.sku} ({args.name})\n"
                      f"::sf-action::add\n::sf-sku::{args.sku}\n::sf-name::{args.name}\n::sf-quantity::{args.quantity}\n::sf-location::{args.location}")
        git_commit_and_push(datarepo_path, item_file, commit_msg)
        # Output
        if args.output == "json":
            print(json.dumps(item, indent=2))
        elif args.output == "yaml":
            print(yaml.safe_dump(item, sort_keys=False))
        else:
            print(f"[smallfactory] Added inventory item '{args.sku}' to datarepo at {datarepo_path}")

    def cmd_inventory_list(args):
        datarepo_path = get_datarepo_path()
        inventory_dir = datarepo_path / "inventory"
        if not inventory_dir.exists():
            print(f"[smallfactory] No inventory directory found in datarepo at {datarepo_path}")
            sys.exit(1)
        files = sorted(inventory_dir.glob("*.yml"))
        items = []
        for fpath in files:
            with open(fpath) as f:
                item = yaml.safe_load(f)
                items.append(item)
        if args.output == "json":
            print(json.dumps(items, indent=2))
        elif args.output == "yaml":
            print(yaml.safe_dump(items, sort_keys=False))
        else:
            if not items:
                print("[smallfactory] No inventory items found.")
                sys.exit(0)
            print(f"SKU       | Name                 | Quantity | Location")
            print("-"*60)
            for item in items:
                print(f"{item['sku']:<9} | {item['name'][:20]:<20} | {item['quantity']:^8} | {item['location']}")

    def cmd_inventory_view(args):
        datarepo_path = get_datarepo_path()
        inventory_dir = datarepo_path / "inventory"
        item_file = inventory_dir / f"{args.sku}.yml"
        if not item_file.exists():
            print(f"[smallfactory] Error: Inventory item '{args.sku}' not found.")
            sys.exit(1)
        with open(item_file) as f:
            item = yaml.safe_load(f)
        if args.output == "json":
            print(json.dumps(item, indent=2))
        elif args.output == "yaml":
            print(yaml.safe_dump(item, sort_keys=False))
        else:
            print(yaml.safe_dump(item, sort_keys=False))

    def cmd_inventory_update(args):
        datarepo_path = get_datarepo_path()
        inventory_dir = datarepo_path / "inventory"
        item_file = inventory_dir / f"{args.sku}.yml"
        if not item_file.exists():
            print(f"[smallfactory] Error: Inventory item '{args.sku}' not found.")
            sys.exit(1)
        with open(item_file) as f:
            item = yaml.safe_load(f)
        if args.field not in item:
            print(f"[smallfactory] Error: Field '{args.field}' not in item.")
            sys.exit(1)
        # Type conversion for quantity
        if args.field == "quantity":
            try:
                item[args.field] = int(args.value)
            except Exception:
                print("[smallfactory] Error: Quantity must be an integer.")
                sys.exit(1)
        else:
            item[args.field] = args.value
        with open(item_file, "w") as f:
            yaml.safe_dump(item, f)
        commit_msg = (f"[smallfactory] Updated {args.field} for inventory item {args.sku}\n"
                      f"::sf-action::update\n::sf-sku::{args.sku}\n::sf-field::{args.field}\n::sf-value::{item[args.field]}")
        git_commit_and_push(datarepo_path, item_file, commit_msg)
        # Output
        if args.output == "json":
            print(json.dumps(item, indent=2))
        elif args.output == "yaml":
            print(yaml.safe_dump(item, sort_keys=False))
        else:
            print(f"[smallfactory] Updated '{args.field}' for inventory item '{args.sku}' in datarepo at {datarepo_path}")

    def cmd_inventory_delete(args):
        datarepo_path = get_datarepo_path()
        inventory_dir = datarepo_path / "inventory"
        item_file = inventory_dir / f"{args.sku}.yml"
        if not item_file.exists():
            print(f"[smallfactory] Error: Inventory item '{args.sku}' not found.")
            sys.exit(1)
        with open(item_file) as f:
            item = yaml.safe_load(f)
        # Confirmation prompt for human output
        if args.output == "human":
            confirm = input(f"Are you sure you want to delete inventory item '{args.sku}'? [y/N]: ").strip().lower()
            if confirm not in ("y", "yes"):
                print("[smallfactory] Delete cancelled.")
                sys.exit(0)
        item_file.unlink()
        commit_msg = (f"[smallfactory] Deleted inventory item {args.sku} ({item.get('name','')})\n"
                      f"::sf-action::delete\n::sf-sku::{args.sku}")
        git_commit_and_push(datarepo_path, item_file, commit_msg)
        # Output
        if args.output == "json":
            print(json.dumps(item, indent=2))
        elif args.output == "yaml":
            print(yaml.safe_dump(item, sort_keys=False))
        else:
            print(f"[smallfactory] Deleted inventory item '{args.sku}' from datarepo at {datarepo_path}")

    def cmd_inventory_adjust(args):
        datarepo_path = get_datarepo_path()
        inventory_dir = datarepo_path / "inventory"
        item_file = inventory_dir / f"{args.sku}.yml"
        if not item_file.exists():
            print(f"[smallfactory] Error: Inventory item '{args.sku}' not found.")
            sys.exit(1)
        with open(item_file) as f:
            item = yaml.safe_load(f)
        try:
            item["quantity"] = int(item.get("quantity", 0)) + int(args.delta)
        except Exception:
            print("[smallfactory] Error: Could not adjust quantity.")
            sys.exit(1)
        with open(item_file, "w") as f:
            yaml.safe_dump(item, f)
        commit_msg = (f"[smallfactory] Adjusted quantity for inventory item {args.sku} by {args.delta}\n"
                      f"::sf-action::adjust\n::sf-sku::{args.sku}\n::sf-delta::{args.delta}\n::sf-new-quantity::{item['quantity']}")
        git_commit_and_push(datarepo_path, item_file, commit_msg)
        # Output
        if args.output == "json":
            print(json.dumps(item, indent=2))
        elif args.output == "yaml":
            print(yaml.safe_dump(item, sort_keys=False))
        else:
            print(f"[smallfactory] Adjusted quantity for inventory item '{args.sku}' by {args.delta} in datarepo at {datarepo_path}")

    COMMANDS = {
        "create": cmd_create,
        # "inventory-init": cmd_inventory_init,  # No longer exposed as CLI command
        "inventory-add": cmd_inventory_add,
        "inventory-list": cmd_inventory_list,
        "inventory-view": cmd_inventory_view,
        "inventory-update": cmd_inventory_update,
        "inventory-delete": cmd_inventory_delete,
        "inventory-adjust": cmd_inventory_adjust,
    }

    if args.command in COMMANDS:
        COMMANDS[args.command](args)
    else:
        parser.print_help()

if __name__ == "__main__":
    main()
